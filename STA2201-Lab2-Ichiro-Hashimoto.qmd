---
title: "STA2201S_lab2"
format: pdf
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
```


```{r echo=FALSE}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```

```{r echo=FALSE}
all_data <- list_packages(limit = 500)
```

```{r echo=FALSE}
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b")
res <- res|> mutate(Year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(Year==2022) |> select(id) |> pull()
delay_2022 <- get_resource(delay_2022_ids)
delay_2022 <- clean_names(delay_2022) #change column names to work with
```

```{r echo=FALSE, include=FALSE}
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")
```

```{r echo=FALSE}
delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))
```

```{r echo=FALSE}
delay_2022 <- delay_2022 |> 
  left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc)) 

delay_2022 <- delay_2022 |>
  mutate(code_srt = ifelse(line=="SRT", code, "NA")) |>
  left_join(delay_codes |> rename(code_srt = `SRT RMENU CODE`, code_desc_srt = `CODE DESCRIPTION...7`) |> select(code_srt, code_desc_srt))|>
    mutate(code = ifelse(code_srt=="NA", code, code_srt),
         code_desc = ifelse(is.na(code_desc_srt), code_desc, code_desc_srt))|>
  select(-code_srt, -code_desc_srt)
```


```{r echo=FALSE}
delay_2022 <- delay_2022 |> 
  mutate(station_clean = ifelse(str_starts(station, "ST"), word(station, 1,2), word(station, 1)))
```

## 1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`

```{r echo=FALSE}
delay_2022|>
  group_by(line, station_clean)|>
  summarize(mean_delay = mean(min_delay))|>
  arrange(-mean_delay)|>
  slice(1:5)|>
  ggplot(aes(x=station_clean, y=mean_delay))+
  geom_col() + 
  facet_wrap(vars(line), 
             scales = "free_y",
             nrow = 4) +
  coord_flip()
```


## 2. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014. Hints:
    + find the ID code you need for the package you need by searching for 'campaign' in the `all_data` tibble above
    + you will then need to `list_package_resources` to get ID for the data file
    + note: the 2014 file you will get from `get_resource` has a bunch of different campaign contributions, so just keep the data that relates to the Mayor election
    
```{r}
res2 <- list_package_resources("f6651a40-2f52-46fc-9e04-b760c16edd5c")
camp_2014 <- get_resource("5b230e92-0a22-4a15-9572-0b19cc222985")
mcamp_2014 <- camp_2014[["2_Mayor_Contributions_2014_election.xls"]]
```
    
## 3. Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)

```{r}
mcamp_2014 <- mcamp_2014|>
  row_to_names(row_number = 1)
```

```{r}
mcamp_2014 <- clean_names(mcamp_2014)
```

```{r}
head(mcamp_2014)
```

## 4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.

```{r}
skim(mcamp_2014)
```

Majorities of values are missing in 'contributors_address', 'goods_or_service_desc', 'relationship_to_candidate', 'president_business_manager', 'authorized_representative', and 'ward'. However, there are no missing values among the rest of the variables.In particular, there are no missing values in 'contribution_amount'. So. we are safe to analyze its distribution. 

We find that contribution amounts are in character values. So, we change them into numeric values.

```{r}
mcamp_2014$contribution_amount <- as.numeric(mcamp_2014$contribution_amount)
```

There are some duplicates but it would be also be reasonable to consider that donors make the same amount of contributions multiple times. Since there is no other relevant information such as 'date' that could be used to see if they are duplicates or not, we keep them.
```{r}
get_dupes(mcamp_2014)
```

## 5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data. 

```{r}
ggplot(data = mcamp_2014)+
  geom_histogram(aes(x=contribution_amount))+
  scale_x_log10()
```

We find there are a few outliers. Indeed there are only 9 contributions out of total 10199 contributions which are greater than 2500. 

```{r}
sum(mcamp_2014$contribution_amount>5000)
```

Shown below is the distribution of the amount of contribution without those outliers:

```{r}
mcamp_2014 |>
  filter(contribution_amount<=5000)|>
  ggplot(aes(x=contribution_amount))+
  geom_histogram(binwidth=100)
```

## 6. List the top five candidates in each of these categories:

    + total contributions

```{r}
mcamp_2014|>
  group_by(candidate)|>
  summarize(tot_cont = sum(contribution_amount))|>
  arrange(-tot_cont)|>
  slice(1:5)
```

    + mean contribution
    
```{r}
mcamp_2014|>
  group_by(candidate)|>
  summarize(mean_cont = mean(contribution_amount))|>
  arrange(-mean_cont)|>
  slice(1:5)
```
  
    + number of contributions

```{r}
mcamp_2014|>
  group_by(candidate)|>
  summarize(num_cont = sum(contribution_amount>0))|>
  arrange(-num_cont)|>
  slice(1:5)
```  
    
## 7. Repeat 5 but without contributions from the candidates themselves.

```{r}
mcamp_2014 |>
  filter(contributors_name!=candidate)|>
  ggplot(aes(x=contribution_amount))+
  geom_histogram(binwidth=100)
```

From the histogram, there seems to be almost no outliers with contribution amount > 5000. Indeed, there is none contribution over 5000. 

```{r}
mcamp_2014 |>
  filter(contribution_amount>5000)|>
  filter(contributors_name!=candidate)
```

From these observations, we can see that those outlier contributions are made by candidates themselves. 

In addition, there are only 31 comtributions out of 11100 contributions made by candidates themselves. Therefore, we can conclude that there are little difference between the distributions of contributions less than 5000 with or without contributions by candidates themselves.
```{r}
sum(mcamp_2014$contributors_name==mcamp_2014$candidate)
```

## 8. How many contributors gave money to more than one candidate? 

```{r}
n_distinct(
  mcamp_2014|>
  group_by(contributors_name)|>
  summarize(num_cand = n_distinct(candidate))|>
  filter(num_cand>1)|>
  select(contributors_name)
)
```
